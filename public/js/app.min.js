/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _Game = __webpack_require__(1);

	var _Game2 = _interopRequireDefault(_Game);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var game = new _Game2.default();

	document.body.addEventListener('click', game.onClick.bind(game));
	game.interface.gameScreen.addEventListener('click', game.fire.bind(game));

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _Circle = __webpack_require__(2);

	var _Circle2 = _interopRequireDefault(_Circle);

	var _Interface = __webpack_require__(3);

	var _Interface2 = _interopRequireDefault(_Interface);

	var _Bullets = __webpack_require__(4);

	var _Bullets2 = _interopRequireDefault(_Bullets);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @class Game class with main loop
	 */

	var Game = function () {
		/**
	  * @constructor
	  */

		function Game() {
			_classCallCheck(this, Game);

			this._getLevels();
			this.interface = new _Interface2.default();
		}

		/**
	  * Запуск игрового процесса
	  *
	  * @private
	  */


		_createClass(Game, [{
			key: '_initNewGame',
			value: function _initNewGame(level) {
				this.level = this.levels[level];
				this.circle = new _Circle2.default(this.level);
				this.bullets = new _Bullets2.default(this.level);
				this._render();
				this._isPaused = false;
				this._lastTime = 0;
				this._fire = false;
				this.bullets.hit = false;
				this.interface.showGameScreen();
				this._gameLoopInterval = setInterval(this._gameLoop.bind(this), 50);
				// TODO: Удаление данных о всех пройденных уровнях
			}
		}, {
			key: '_getLevels',
			value: function _getLevels() {
				var xhr = new XMLHttpRequest();
				xhr.open('GET', '/levels.json', false);
				xhr.send();
				if (xhr.status !== 200) {
					console.log(xhr.status + ': ' + xhr.statusText);
				}
				this.levels = JSON.parse(xhr.responseText);
			}

			/**
	   * Прорисовка игровых компонентов
	   *
	   * @private
	   */

		}, {
			key: '_render',
			value: function _render() {
				this.circle.renderSlices();
				this.bullets.renderBullets();
			}

			/**
	   * Сброс данных уровня при выходе или конце игры
	   *
	   * @private
	   */

		}, {
			key: '_resetLevel',
			value: function _resetLevel() {
				clearInterval(this._gameLoopInterval);
				this.bullets.bulletPath = 0;
				if (this.bullets.activeBullet) {
					this.bullets.activeBullet.remove();
				}
				this.circle.el.innerHTML = '';
				this.bullets.el.innerHTML = '';
			}

			/**
	   * Проверка правильности попадания и продолжение игры с новой пулей или экран проигрыша
	   *
	   * @private
	   */

		}, {
			key: '_onHit',
			value: function _onHit() {
				if (this.circle.hitSectorColor === this.bullets.activeBullet.color) {
					this._fire = false;
					this.circle.deleteHitSector();
					this._levelPassed();
					this.bullets.reset();
				} else {
					this._resetLevel();
					this.interface.showLoseScreen();
					// TODO: Показываем экран проигрыша
				}
			}

			/**
	   * Основной игровой цикл
	   *
	   * @private
	   */

		}, {
			key: '_gameLoop',
			value: function _gameLoop() {
				var time = Date.now();
				var delta = time - this._lastTime; // время с последнего обновления
				this._lastTime = time; // на следующий вызов сохраняется текущее время
				if (!this._isPaused) {
					this.circle.update(delta); // круг поворачивается исходя из прошедшего времени
					if (this._fire) {
						// произошло событие выстрела
						this.bullets.update(delta); // пуля летит
						if (this.bullets.hit) {
							// когда координаты пули поравнялись с кругом
							this._onHit(); // правильный сектор удаляется либо показывается экран конца игры
						}
					}
				}
			}

			/**
	   * Проверка, пройден ли уровень
	   *
	   * @private
	   */

		}, {
			key: '_levelPassed',
			value: function _levelPassed() {
				if (!this.circle.el.children.length) {
					this._resetLevel();
					this.interface.showWinScreen();
				}
			}

			/**
	  * Обработка клика для запуска пули
	  *
	  * @param  {event} bullet fire event
	  * @returns {boolean}
	  */

		}, {
			key: 'fire',
			value: function fire(event) {
				event.preventDefault();
				if (event.target.dataset.action !== 'pause') {
					this._fire = true;
				}
			}

			/**
	   * Обработка событий клика по кнопкам меню
	   *
	   * @param	{Event} click event
	   */

		}, {
			key: 'onClick',
			value: function onClick(event) {
				event.preventDefault();

				switch (event.target.dataset.action) {
					case 'newgame':
						this.levelNumber = 1;
						this._initNewGame(this.levelNumber);
						break;
					case 'continue':
						// TODO: Загрузка из кукис данных о последнем законченном уровне
						this._isPaused = false;
						this.interface.showGameScreen();
						break;
					case 'pause':
						this._isPaused = true;
						this.interface.showPauseScreen();
						break;
					case 'exit':
						// TODO: Сохранение в кукис данных о последнем законченном уровне
						this._resetLevel();
						this.interface.showStartScreen();
						break;
					case 'nextlevel':
						this.levelNumber++;
						this._initNewGame(this.levelNumber);
						this.interface.showGameScreen();
						break;
					case 'tryagain':
						this._initNewGame(this.levelNumber);
						this.interface.showGameScreen();
						break;
					default:
						break;
				}
			}
		}]);

		return Game;
	}();

	exports.default = Game;

/***/ },
/* 2 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @class Circle class
	 */

	var Circle = function () {
		function Circle(level) {
			_classCallCheck(this, Circle);

			this.level = level;
			this.el = document.querySelector('.js-circle');
			this.center = document.querySelector('.circle__center');
			this.spinDegree = 0;
		}

		/**
	  * Получение значений для размера секторов круга
	  *
	  * @private
	  */


		_createClass(Circle, [{
			key: '_getRotationDegs',
			value: function _getRotationDegs() {
				this._rotationDegs = [0];
				this._rotationDeg = 0;
				for (var i = 0; i < this.level.colors.length; i++) {
					this._rotationDeg += +this.level.colorSlice[i];
					this._rotationDegs.push(this._rotationDeg);
				}
			}

			/**
	   * Если сектор больше 90 градусов, то для корректного отражения он увеличивается в 10 раз
	   *
	   * @private
	   */

		}, {
			key: '_getScaleMetric',
			value: function _getScaleMetric() {
				this._scaleMetrics = [];
				for (var i = 0; i < this.level.colors.length; i++) {
					this._scale = this.level.colorSlice[i] <= 90 ? 1 : 10;
					this._scaleMetrics.push(this._scale);
				}
			}

			/**
	   * Отображение номер уровня в центре круга
	   *
	   * @private
	   */

		}, {
			key: '_showLevelNumber',
			value: function _showLevelNumber() {
				this.center.innerHTML = this.level.name;
			}

			// Прорисовка секторов круга

		}, {
			key: 'renderSlices',
			value: function renderSlices() {
				this._showLevelNumber();
				this._getRotationDegs();
				this._getScaleMetric();
				for (var i = 0; i < this.level.colors.length; i++) {
					var newSector = document.createElement('li');
					newSector.classList.add('circle__part');
					newSector.style.background = this.level.colors[i];
					newSector.style.transform = '\n\t\t\t\trotate(' + this._rotationDegs[i] + 'deg)\n\t\t\t\tskew(' + (90 - this.level.colorSlice[i] - 1) + 'deg)\n\t\t\t\tscale(' + this._scaleMetrics[i] + ')\n\t\t\t';
					this.el.appendChild(newSector);
				}
			}

			// Получение цвета сектора, находящегося в нижней точке круга

		}, {
			key: 'getHitSector',
			value: function getHitSector() {
				this.x = Math.max(document.documentElement.clientWidth, window.innerWidth || 0) / 2;
				this.y = this.el.parentNode.offsetTop + this.el.clientHeight - 1;
				this.hitSector = document.elementFromPoint(this.x, this.y);
				this.hitSectorColor = this.hitSector.style.backgroundColor;
			}

			// Удаление сектора при попадании

		}, {
			key: 'deleteHitSector',
			value: function deleteHitSector() {
				this.hitSector.remove();
			}

			// Кручение круга для цикла игры

		}, {
			key: 'update',
			value: function update(delta) {
				this.spinDegree += delta / 50 * this.level.circleSpeed;
				if (this.spinDegree >= 360) {
					this.spinDegree = 0;
				}
				this.el.style.transform = 'rotate(' + this.spinDegree + 'deg)';
				this.getHitSector();
			}
		}]);

		return Circle;
	}();

	exports.default = Circle;

/***/ },
/* 3 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	* @module UI module
	*/

	var Interface = function () {
		function Interface() {
			_classCallCheck(this, Interface);

			this.startScreen = document.querySelector('.screen__start');
			this.gameScreen = document.querySelector('.screen__game');
			this.pauseScreen = document.querySelector('.screen__pause');
			this.winScreen = document.querySelector('.screen__win');
			this.loseScreen = document.querySelector('.screen__lose');
		}

		/**
	  * @param  {HTMLElement} element
	  * @private
	  */


		_createClass(Interface, [{
			key: '_hideElement',
			value: function _hideElement(element) {
				element.classList.add('invisible');
			}

			/**
	   * @param  {HTMLElement} element
	   * @private
	   */

		}, {
			key: '_showElement',
			value: function _showElement(element) {
				element.classList.remove('invisible');
			}
		}, {
			key: 'showStartScreen',
			value: function showStartScreen() {
				this._hideElement(this.gameScreen);
				this._showElement(this.startScreen);
				this._hideElement(this.pauseScreen);
				this._hideElement(this.loseScreen);
				this._hideElement(this.winScreen);
			}
		}, {
			key: 'showGameScreen',
			value: function showGameScreen() {
				this._showElement(this.gameScreen);
				this._hideElement(this.startScreen);
				this._hideElement(this.pauseScreen);
				this._hideElement(this.loseScreen);
				this._hideElement(this.winScreen);
			}
		}, {
			key: 'showPauseScreen',
			value: function showPauseScreen() {
				this._hideElement(this.gameScreen);
				this._showElement(this.pauseScreen);
			}
		}, {
			key: 'showWinScreen',
			value: function showWinScreen() {
				this._hideElement(this.gameScreen);
				this._showElement(this.winScreen);
			}
		}, {
			key: 'showLoseScreen',
			value: function showLoseScreen() {
				this._hideElement(this.gameScreen);
				this._showElement(this.loseScreen);
			}
		}]);

		return Interface;
	}();

	exports.default = Interface;

/***/ },
/* 4 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @class Bullets class
	 */

	var Bullets = function () {
		function Bullets(level) {
			_classCallCheck(this, Bullets);

			this.level = level;
			this.el = document.querySelector('.js-bullets');
			this.circle = document.querySelector('.js-circle');
			this.bulletPath = 0;
			this.hit = false;
		}

		// Отрисовка пуль


		_createClass(Bullets, [{
			key: 'renderBullets',
			value: function renderBullets() {
				var _this = this;

				var li = document.createElement('li');
				li.classList.add('bullet');
				this.level.colors.forEach(function (color) {
					var newBullet = li.cloneNode();
					newBullet.style.background = color;
					_this.el.appendChild(newBullet);
				});
				this.makeActiveBullet();
			}

			// Установка активной пули

		}, {
			key: 'makeActiveBullet',
			value: function makeActiveBullet() {
				this.activeBullet = this.el.childNodes[0];
				if (this.activeBullet) {
					this.activeBullet.classList.add('bullet--active');
					this.activeBullet.color = this.activeBullet.style.backgroundColor;
					this.el.parentNode.insertBefore(this.activeBullet, this.el);
				}
			}

			// Движение пули для цикла игры

		}, {
			key: 'update',
			value: function update(delta) {
				this.fullPath = this.activeBullet.offsetTop - this.activeBullet.clientHeight - this.circle.offsetTop - this.circle.clientHeight;
				this.bulletPath += this.fullPath / delta * this.level.bulletSpeed;
				if (this.bulletPath >= this.fullPath) {
					this.bulletPath = this.fullPath;
					this.hit = true;
				}
				this.activeBullet.style.transform = 'translate(-50%, -' + this.bulletPath + 'px)';
			}

			// Сброс настроек пуль после выстрела, присвоение новой пули статуса активной

		}, {
			key: 'reset',
			value: function reset() {
				this.hit = false;
				this.activeBullet.remove();
				this.bulletPath = 0;
				this.activeBullet.style.transform = 'translate(-50%)';
				this.makeActiveBullet();
			}
		}]);

		return Bullets;
	}();

	exports.default = Bullets;

/***/ }
/******/ ]);